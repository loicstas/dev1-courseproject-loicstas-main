// Portions of this project were developed using suggestions generated by ChatGPT (OpenAI)
// 18/12/2024: https://chatgpt.com/c/676318a7-8654-800a-be98-6a026ff9e6ed
// Modifications made by Lo√Øc Stas




const container = document.getElementById("container");
const balls = [];
const numBalls = 250;

// Helper functie voor random waarden
function getRandom(min, max) {
  return Math.random() * (max - min) + min;
}

// Maak ballen aan
for (let i = 0; i < numBalls; i++) {
  const ball = document.createElement("div");
  ball.classList.add("ball");
  container.appendChild(ball);

  // Initialiseer balgegevens
  balls.push({
    element: ball,
    x: getRandom(0, container.offsetWidth - 20),
    y: getRandom(0, container.offsetHeight - 20),
    velocityX: getRandom(-3, 3),
    velocityY: getRandom(-3, 3),
    defaultVelocityX: getRandom(-3, 3),
    defaultVelocityY: getRandom(-3, 3),
    isExploding: false
  });

  // Zorg dat de bal correct gepositioneerd is
  ball.style.position = "absolute";
}

// Beweeg de ballen
function moveBalls() {
  balls.forEach((ball) => {
    ball.x += ball.velocityX;
    ball.y += ball.velocityY;

    // Botsing met de containerwanden
    if (ball.x <= 0 || ball.x + ball.element.offsetWidth >= container.offsetWidth) {
      ball.velocityX = -ball.velocityX;
    }
    if (ball.y <= 0 || ball.y + ball.element.offsetHeight >= container.offsetHeight) {
      ball.velocityY = -ball.velocityY;
    }

    // Update de visuele positie
    ball.element.style.left = `${ball.x}px`;
    ball.element.style.top = `${ball.y}px`;
  });

  // Vraag een nieuwe frame aan
  requestAnimationFrame(moveBalls);
}

// Handeling bij klik
container.addEventListener("click", (event) => {
  const clickX = event.clientX - container.offsetLeft;
  const clickY = event.clientY - container.offsetTop;

  balls.forEach((ball) => {
    const dx = ball.x + ball.element.offsetWidth / 2 - clickX;
    const dy = ball.y + ball.element.offsetHeight / 2 - clickY;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance === 0) return; // Vermijd deling door nul

    const force = Math.max(10 - distance / 50, 0); // Bereken kracht
    ball.velocityX += (dx / distance) * force;
    ball.velocityY += (dy / distance) * force;

    ball.isExploding = true;
  });

  // Reset de velocity na een korte tijd
  setTimeout(() => {
    balls.forEach((ball) => {
      if (ball.isExploding) {
        ball.velocityX = ball.defaultVelocityX;
        ball.velocityY = ball.defaultVelocityY;
        ball.isExploding = false;
      }
    });
  }, 100000); // Stel een redelijke timeout in
});

// Start de animatie
moveBalls();
